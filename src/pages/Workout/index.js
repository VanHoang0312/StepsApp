import React, { useState, useEffect } from "react";
import { Text, View, StyleSheet, ScrollView, StatusBar, RefreshControl } from "react-native";
import Icon from 'react-native-vector-icons/Ionicons';
import { SafeAreaView } from 'react-native-safe-area-context';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { openDB } from '../../../Database/database';
import {
  getAllActivityData,
} from '../../../Database/DailyDatabase';
import {
  getAllGoalsData,
} from '../../../Database/GoalsDatabase';
import { useAuth } from '../../helpers/AuthContext';

function Workout() {
  const [notifications, setNotifications] = useState([]); // M·∫£ng l∆∞u th√¥ng b√°o
  const [db, setDb] = useState(null); // K·∫øt n·ªëi database
  const [activitySum, setActivitySum] = useState({ steps: 0, calories: 0, distance: 0, activeTime: 0 }); // T·ªïng ho·∫°t ƒë·ªông
  const [goalSum, setGoalSum] = useState({ steps: 6000, calories: 300, distance: 5, activeTime: 30 }); // M·ª•c ti√™u hi·ªán t·∫°i
  const [refreshing, setRefreshing] = useState(false); // Tr·∫°ng th√°i l√†m m·ªõi
  const { userId } = useAuth();

  // H√†m t√≠nh s·ªë tu·∫ßn trong nƒÉm
  const getWeekNumber = (date) => {
    const firstDayOfYear = new Date(date.getFullYear(), 0, 1);
    const pastDaysOfYear = (date - firstDayOfYear) / 86400000;
    return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);
  };

  // H√†m l·∫•y ng√†y ƒë·∫ßu tu·∫ßn (Th·ª© Hai)
  const getMonday = (date) => {
    const d = new Date(date);
    const day = d.getDay();
    const diff = d.getDate() - day + (day === 0 ? -6 : 1); // ƒêi·ªÅu ch·ªânh v·ªÅ Th·ª© Hai
    return new Date(d.setDate(diff)).toISOString().split('T')[0];
  };

  // H√†m t√≠nh t·ªïng d·ªØ li·ªáu tu·∫ßn t·ª´ Th·ª© Hai ƒë·∫øn ng√†y hi·ªán t·∫°i (ho·∫∑c Th·ª© T∆∞ n·∫øu gi·ªØa tu·∫ßn)
  const getWeeklyActivitySum = async (db, userId, startDate, endDate) => {
    try {
      const allActivity = await getAllActivityData(db);
      console.log("üîç All activity data:", allActivity); // Debug to√†n b·ªô d·ªØ li·ªáu
      const weeklyData = allActivity.filter(
        (item) => item.day >= startDate && item.day <= endDate && (item.userId === userId || item.userId === null)
      );
      console.log(`üîç Filtered activity t·ª´ ${startDate} ƒë·∫øn ${endDate}:`, weeklyData); // Debug d·ªØ li·ªáu l·ªçc

      const total = weeklyData.reduce(
        (sum, item) => ({
          steps: sum.steps + (item.steps || 0),
          calories: sum.calories + (item.calories || 0),
          distance: sum.distance + (item.distance || 0),
          activeTime: sum.activeTime + (item.activeTime || 0),
        }),
        { steps: 0, calories: 0, distance: 0, activeTime: 0 }
      );

      console.log(`üîç T·ªïng d·ªØ li·ªáu t·ª´ ${startDate} ƒë·∫øn ${endDate}:`, total);
      return total;
    } catch (error) {
      console.error("Error calculating weekly activity sum:", error);
      return { steps: 0, calories: 0, distance: 0, activeTime: 0 };
    }
  };

  // H√†m l·∫•y m·ª•c ti√™u hi·ªán t·∫°i (ng√†y h√¥m nay)
  const getCurrentGoal = async (db, userId, currentDate) => {
    try {
      const allGoals = await getAllGoalsData(db);
      console.log("üéØ All goals data:", allGoals); // Debug to√†n b·ªô m·ª•c ti√™u
      const currentGoal = allGoals.find(
        (item) => item.day === currentDate && (item.userId === userId || item.userId === null)
      );
      console.log(`üéØ M·ª•c ti√™u ng√†y ${currentDate}:`, currentGoal); // Debug m·ª•c ti√™u h√¥m nay

      if (!currentGoal) {
        console.log("üéØ Kh√¥ng c√≥ m·ª•c ti√™u h√¥m nay, d√πng m·∫∑c ƒë·ªãnh");
        return { steps: 6000, calories: 300, distance: 5, activeTime: 30 }; // M·∫∑c ƒë·ªãnh
      }

      return {
        steps: currentGoal.steps || 6000,
        calories: currentGoal.calories || 300,
        distance: currentGoal.distance || 5,
        activeTime: currentGoal.activeTime || 30,
      };
    } catch (error) {
      console.error("Error fetching current goal:", error);
      return { steps: 6000, calories: 300, distance: 5, activeTime: 30 };
    }
  };

  const formatDate = (dateStr) => {
    const [year, month, day] = dateStr.split('-');
    return `${day}/${month}/${year}`;
  };

  // H√†m ki·ªÉm tra ng√†y v√† c·∫≠p nh·∫≠t th√¥ng b√°o
  const checkDayAndNotify = async () => {
    if (!db) {
      console.log("‚è≥ Ch∆∞a c√≥ db, b·ªè qua checkDayAndNotify");
      return;
    }

    const today = new Date();
    const dayOfWeek = today.getDay();
    const weekNumber = getWeekNumber(today);
    const todayStr = today.toISOString().split('T')[0];
    const mondayStr = getMonday(today);

    // L·∫•y tu·∫ßn ƒë√£ l∆∞u t·ª´ AsyncStorage
    const storedWeek = await AsyncStorage.getItem('currentWeek');
    const parsedStoredWeek = storedWeek ? parseInt(storedWeek, 10) : null;

    let newNotifications = [...notifications];

    // T√≠nh t·ªïng ho·∫°t ƒë·ªông v√† l·∫•y m·ª•c ti√™u hi·ªán t·∫°i
    let endDate = todayStr;
    if (dayOfWeek === 3) {
      // Gi·ªØa tu·∫ßn: Ch·ªâ l·∫•y t·ª´ Th·ª© Hai ƒë·∫øn Th·ª© T∆∞
      const wednesday = new Date(today);
      wednesday.setDate(today.getDate() - (dayOfWeek - 3));
      endDate = wednesday.toISOString().split('T')[0];
    }
    const activityTotal = await getWeeklyActivitySum(db, userId, mondayStr, endDate);
    const currentGoal = await getCurrentGoal(db, userId, todayStr);

    // C·∫≠p nh·∫≠t state tr∆∞·ªõc khi x·ª≠ l√Ω th√¥ng b√°o
    setActivitySum(activityTotal);
    setGoalSum(currentGoal);

    // N·∫øu tu·∫ßn m·ªõi v√† c√≥ th√¥ng b√°o m·ªõi, x√≥a th√¥ng b√°o c≈© ngay l·∫≠p t·ª©c
    if (parsedStoredWeek !== weekNumber && (dayOfWeek === 3 || dayOfWeek === 6 || dayOfWeek === 0)) {
      newNotifications = []; // X√≥a t·∫•t c·∫£ th√¥ng b√°o c≈©
      await AsyncStorage.setItem('currentWeek', weekNumber.toString());
      console.log("üìÖ Tu·∫ßn m·ªõi b·∫Øt ƒë·∫ßu, x√≥a th√¥ng b√°o c≈© v√† c·∫≠p nh·∫≠t tu·∫ßn:", weekNumber);
    }

    // Th√™m th√¥ng b√°o m·ªõi d·ª±a tr√™n ng√†y
    if (dayOfWeek === 3) { // Th·ª© T∆∞ - gi·ªØa tu·∫ßn
      const title = "Th√¥ng b√°o gi·ªØa tu·∫ßn";
      const message = `ƒê√£ gi·ªØa tu·∫ßn r·ªìi! B·∫°n ƒë·∫°t ${Math.round((activityTotal.steps / currentGoal.steps) * 100)}% m·ª•c ti√™u. C·ªë l√™n nh√©!`;
      if (!newNotifications.some(notif => notif.title === title)) {
        newNotifications.push({ title, message });
      }
    } else if (dayOfWeek === 6 || dayOfWeek === 0) { // Th·ª© B·∫£y ho·∫∑c Ch·ªß Nh·∫≠t - cu·ªëi tu·∫ßn
      const title = "Th√¥ng b√°o cu·ªëi tu·∫ßn";
      const message = `Cu·ªëi tu·∫ßn r·ªìi (${formatDate(todayStr)})! B·∫°n ƒë·∫°t ${Math.round((activityTotal.steps / currentGoal.steps) * 100)}% m·ª•c ti√™u. Ngh·ªâ ng∆°i ho·∫∑c tƒÉng t·ªëc n√†o!`;
      if (!newNotifications.some(notif => notif.title === title)) {
        newNotifications.push({ title, message });
      }
    }

    setNotifications(newNotifications);
    console.log("üìÖ Ki·ªÉm tra ng√†y:", todayStr, "Tu·∫ßn:", weekNumber, "Th√¥ng b√°o hi·ªán t·∫°i:", newNotifications);
    console.log("üîç T·ªïng ho·∫°t ƒë·ªông tu·∫ßn:", activityTotal);
    console.log("üéØ M·ª•c ti√™u hi·ªán t·∫°i:", currentGoal);
  };

  // H√†m l√†m m·ªõi d·ªØ li·ªáu
  const onRefresh = async () => {
    setRefreshing(true);
    try {
      if (db) {
        await checkDayAndNotify(); // T√°i s·ª≠ d·ª•ng h√†m ƒë·ªÉ l√†m m·ªõi d·ªØ li·ªáu
        console.log("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi");
      }
    } catch (error) {
      console.error("üö® L·ªói khi l√†m m·ªõi d·ªØ li·ªáu:", error);
    } finally {
      setRefreshing(false);
    }
  };

  // Kh·ªüi t·∫°o database khi mount
  useEffect(() => {
    const initializeDB = async () => {
      const database = await openDB();
      console.log("üîó ƒê√£ m·ªü database:", database ? "C√≥" : "Kh√¥ng");
      setDb(database);
    };
    initializeDB();
  }, []);

  // Ch·∫°y checkDayAndNotify khi db thay ƒë·ªïi
  useEffect(() => {
    if (db) {
      checkDayAndNotify();
    }
  }, [db]);

  return (
    <>
      <StatusBar
        translucent
        backgroundColor="transparent"
        barStyle="dark-content"
      />
      <SafeAreaView style={styles.container} edges={['right', 'bottom', 'left']}>
        <ScrollView
          contentContainerStyle={{ flexGrow: 1 }}
          showsVerticalScrollIndicator={false}
          refreshControl={
            <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
          }
        >
          <View style={styles.card}>
            {/* Hi·ªÉn th·ªã t·∫•t c·∫£ th√¥ng b√°o trong card */}
            {notifications.length > 0 && (
              <View style={styles.notificationContainer}>
                {notifications.map((notif, index) => (
                  <View key={index} style={styles.notificationItem}>
                    <Text style={styles.notificationTitle}>{notif.title}</Text>
                    <Text style={styles.notificationMessage}>{notif.message}</Text>
                  </View>
                ))}
              </View>
            )}

            <View style={styles.statList}>
              <View style={styles.statRow}>
                <Icon name="walk-outline" size={20} color="#000" />
                <Text style={styles.statText}>{activitySum.steps} b∆∞·ªõc</Text>
                <Text style={[styles.percent, activitySum.steps >= goalSum.steps ? styles.percentGreen : styles.percentRed]}>
                  {Math.round((activitySum.steps / goalSum.steps) * 100)}%
                </Text>
              </View>
              <View style={styles.statRow}>
                <Icon name="flame-outline" size={20} color="#000" />
                <Text style={styles.statText}>{activitySum.calories} kcal</Text>
                <Text style={[styles.percent, activitySum.calories >= goalSum.calories ? styles.percentGreen : styles.percentRed]}>
                  {Math.round((activitySum.calories / goalSum.calories) * 100)}%
                </Text>
              </View>
              <View style={styles.statRow}>
                <Icon name="navigate-outline" size={20} color="#000" />
                <Text style={styles.statText}>{activitySum.distance} km</Text>
                <Text style={[styles.percent, activitySum.distance >= goalSum.distance ? styles.percentGreen : styles.percentRed]}>
                  {Math.round((activitySum.distance / goalSum.distance) * 100)}%
                </Text>
              </View>
              <View style={styles.statRow}>
                <Icon name="time-outline" size={20} color="#000" />
                <Text style={styles.statText}>{activitySum.activeTime} ph√∫t</Text>
                <Text style={[styles.percent, activitySum.activeTime >= goalSum.activeTime ? styles.percentGreen : styles.percentRed]}>
                  {Math.round((activitySum.activeTime / goalSum.activeTime) * 100)}%
                </Text>
              </View>
            </View>
          </View>
        </ScrollView>
      </SafeAreaView>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F5F5',
  },
  card: {
    backgroundColor: '#fff',
    padding: 16,
    borderRadius: 8,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
    margin: 16,
  },
  notificationContainer: {
    marginBottom: 16,
  },
  notificationItem: {
    backgroundColor: '#E6F3FF',
    padding: 10,
    borderRadius: 6,
    marginBottom: 8,
  },
  notificationTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#007BFF',
    marginBottom: 4,
    textAlign: 'center',
  },
  notificationMessage: {
    fontSize: 14,
    color: '#555',
    textAlign: 'center',
  },
  statList: {
    marginBottom: 16,
  },
  statRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 12,
    alignItems: 'center',
    paddingHorizontal: 8,
  },
  statText: {
    fontSize: 14,
    flex: 1,
    marginLeft: 10,
  },
  percent: {
    fontSize: 14,
  },
  percentRed: {
    color: 'red',
  },
  percentGreen: {
    color: 'green',
  },
});

export default Workout;