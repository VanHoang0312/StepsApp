import React, { useEffect, useState } from "react";
import { Text, StyleSheet, View, SafeAreaView, ScrollView, TouchableOpacity } from "react-native";
import Icon from "react-native-vector-icons/MaterialIcons";
import { openDB } from "../../../Database/database";
import { loadBodyFromSQLite } from "../../../Database/BodyDatabase";
import { useAuth } from "../../helpers/AuthContext";


function GoalWeight() {
  const [weight, setWeight] = useState(0);
  const [bodysize, setBodysize] = useState(0)
  const [db, setDb] = useState()
  const { userId } = useAuth();
  const today = new Date().toISOString().split('T')[0];

  useEffect(() => {
    const initDB = async () => {
      try {
        const database = await openDB()
        setDb(database)
        const loadWeight = await loadBodyFromSQLite(database, userId, today)
        setWeight(loadWeight.weight || 0);
        setBodysize(loadWeight.bodysize || 0)
      } catch (error) {
        console.error('initDB failed:', error);
      }
    }
    initDB()
  }, [userId])


  const increaseSteps = () => setWeight((prev) => Math.max(prev + 1, 0));
  const decreaseSteps = () => setWeight((prev) => Math.max(prev - 1, 0));

  // H√†m t√≠nh BMI
  const calculateBMI = (weight, height) => {
    if (!weight || !height) return 0;
    return (weight / ((height / 100) ** 2)).toFixed(1);
  };

  const bmiValue = calculateBMI(weight, bodysize);
  const getBMIStatus = (bmi) => {
    if (bmi < 18.5) return { status: "Thi·∫øu C√¢n", color: "#FFA500", range: "< 18.5" };
    if (bmi >= 18.5 && bmi <= 24.9) return { status: "B√¨nh Th∆∞·ªùng", color: "#57A8FF", range: "18.5 - 24.9" };
    if (bmi >= 25 && bmi <= 29.9) return { status: "Th·ª´a C√¢n", color: "#FF4500", range: "25 - 29.9" };
    return { status: "B√©o Ph√¨", color: "#DC143C", range: "‚â• 30" };
  };


  const { status, color, range } = getBMIStatus(bmiValue);

  return (
    <SafeAreaView>
      <ScrollView>
        <View style={styles.container}>
          <Text style={styles.header}>C√¢n N·∫∑ng</Text>
          <Text style={styles.subHeader}>ƒê·∫∑t M·ª•c ti√™u. Theo D√µi C√¢n N·∫∑ng.</Text>

          {/* B·ªô ƒë·∫øm c√¢n n·∫∑ng */}
          <View style={styles.weightCounter}>
            <TouchableOpacity onPress={decreaseSteps} style={styles.iconButton}>
              <Icon name="remove" size={20} color="#000" />
            </TouchableOpacity>

            <View style={styles.weightDisplay}>
              <Text style={styles.weightUnit}>BMI {bmiValue}</Text>
              <Text style={styles.weightText}>{weight} kg</Text>
            </View>

            <TouchableOpacity onPress={increaseSteps} style={styles.iconButton}>
              <Icon name="add" size={20} color="#000" />
            </TouchableOpacity>
          </View>


          <View style={styles.bmiContainer}>
            <Text style={styles.bmiTitle}>BMI {bmiValue}</Text>


            <View style={[styles.bmiStatus, { backgroundColor: color }]}>
              <Text style={styles.bmiRange}>{range}</Text>
              <Text style={styles.bmiLabel}>{status}</Text>
            </View>

            <Text style={styles.bmiDescription}>
              Ch·ªâ s·ªë kh·ªëi c∆° th·ªÉ (BMI) l√† m·ªôt ch·ªâ b√°o v·ªÅ t·ª∑ l·ªá m·ª° c∆° th·ªÉ c·ªßa b·∫°n.
              N√≥ ƒë∆∞·ª£c t√≠nh t·ª´ chi·ªÅu cao v√† c√¢n n·∫∑ng c·ªßa b·∫°n, v√† c√≥ th·ªÉ cho bi·∫øt li·ªáu b·∫°n thi·∫øu c√¢n, b√¨nh th∆∞·ªùng, th·ª´a c√¢n hay b√©o ph√¨.
              N√≥ c≈©ng c√≥ th·ªÉ gi√∫p b·∫°n x√°c ƒë·ªãnh nguy c∆° m·∫Øc c√°c b·ªánh li√™n quan ƒë·∫øn t·ª∑ l·ªá m·ª° c∆° th·ªÉ cao h∆°n (gi·ªØ ·ªü m·ª©c xanh nh√© üòÉ).
            </Text>
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    padding: 16
  },
  header: {
    fontSize: 26,
    fontWeight: "bold",
    marginBottom: 4,
  },
  subHeader: {
    fontSize: 18,
    color: "#6C757D",
    marginBottom: 20,
  },
  weightCounter: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#FFFFFF",
    borderRadius: 10,
    shadowColor: "#000",
    shadowOpacity: 0.1,
    shadowRadius: 5,
    elevation: 2,
    padding: 16,
    width: "100%",
    justifyContent: "space-between",
    marginTop: 15
  },
  iconButton: {
    padding: 10,
    backgroundColor: "#F1F3F5",
    borderRadius: 50,
  },
  weightText: {
    fontSize: 24,
    fontWeight: "bold",
  },
  weightDisplay: {
    alignItems: "center",
  },
  weightUnit: {
    fontSize: 14,
    color: "#A0A0A0",
    fontWeight: "bold",
  },

  bmiContainer: {
    marginTop: 20,
    backgroundColor: "#F8F9FA",
    padding: 16,
    borderRadius: 10,
    shadowColor: "#000",
    shadowOpacity: 0.1,
    shadowRadius: 5,
    elevation: 2,
  },
  bmiTitle: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 8,
  },
  bmiStatus: {
    backgroundColor: "#57A8FF",
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 10,
    alignItems: "center",
    marginBottom: 12,
  },
  bmiRange: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#fff",
  },
  bmiLabel: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#fff",
  },
  bmiDescription: {
    fontSize: 14,
    color: "#6C757D",
    textAlign: "justify",
  },
});

export default GoalWeight;
