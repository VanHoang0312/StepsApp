import SQLite from 'react-native-sqlite-storage';
SQLite.enablePromise(true);

// H√†m t·∫°o b·∫£ng ho·∫°t ƒë·ªông v·ªõi c·ªôt userId
const createTable = async (db) => {
  try {
    await db.transaction(async (tx) => {
      await tx.executeSql(
        `CREATE TABLE IF NOT EXISTS activity (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          userId TEXT,                
          day TEXT UNIQUE,
          steps INTEGER,
          distance REAL,
          calories REAL,
          activeTime INTEGER
        )`
      );
    });
    console.log("Table created successfully with userId column");
  } catch (error) {
    console.error("Error creating table:", error);
  }
};

// L∆∞u d·ªØ li·ªáu v·ªõi userId
const saveStepsToSQLite = async (db, userId, steps, distance, calories, activeTime) => {
  try {
    const today = new Date().toISOString().split('T')[0];
    console.log("üîç B·∫Øt ƒë·∫ßu l∆∞u d·ªØ li·ªáu:", { userId, today, steps, distance, calories, activeTime });

    db.transaction((tx) => {
      // Ki·ªÉm tra n·∫øu ƒë√£ c√≥ d·ªØ li·ªáu h√¥m nay v·ªõi userId = NULL ho·∫∑c userId hi·ªán t·∫°i
      tx.executeSql(
        'SELECT * FROM activity WHERE day = ?',
        [today],
        (_, results) => {
          console.log("üìã K·∫øt qu·∫£ SELECT:", results.rows.length > 0 ? results.rows.item(0) : "Kh√¥ng c√≥ b·∫£n ghi");

          if (results.rows.length > 0) {
            // N·∫øu ƒë√£ c√≥ d·ªØ li·ªáu th√¨ c·∫≠p nh·∫≠t
            tx.executeSql(
              'UPDATE activity SET userId = ?, steps = ?, distance = ?, calories = ?, activeTime = ? WHERE day = ?',
              [userId, steps, distance, calories, activeTime, today],
              (_, { rowsAffected }) => {
                console.log(`‚úÖ Updated ${rowsAffected} record(s) with userId:`, userId);
                resolve();
              },
              (_, error) => {
                console.error('üö® L·ªói khi UPDATE:', error);
                reject(error);
              }
            );
          } else {
            // N·∫øu ch∆∞a c√≥ d·ªØ li·ªáu th√¨ th√™m m·ªõi
            tx.executeSql(
              'INSERT INTO activity (userId, day, steps, distance, calories, activeTime) VALUES (?, ?, ?, ?, ?, ?)',
              [userId, today, steps, distance, calories, activeTime],
              (_, { insertId }) => {
                console.log('‚úÖ Inserted new record with id:', insertId, 'for', today, 'with userId:', userId);
                resolve();
              },
              (_, error) => {
                console.error('üö® L·ªói khi INSERT:', error);
                reject(error);
              }
            );
          }
        },
        (_, error) => {
          console.error('üö® L·ªói khi SELECT:', error);
          reject(error);
        }
      );
    });

    console.log("üíæ Ho√†n t·∫•t l∆∞u d·ªØ li·ªáu v√†o SQLite");

    // Ki·ªÉm tra d·ªØ li·ªáu ngay sau khi l∆∞u
    const allData = await getAllActivityData(db);
    console.log("üîé Ki·ªÉm tra sau khi l∆∞u:", allData);
  } catch (error) {
    console.error('üö® L·ªói t·ªïng qu√°t khi l∆∞u d·ªØ li·ªáu v√†o SQLite:', error);
    throw error; // N√©m l·ªói ƒë·ªÉ h√†m g·ªçi x·ª≠ l√Ω
  }
};


// Load d·ªØ li·ªáu
const loadStepsFromSQLite = async (db, userId, day) => {
  return new Promise((resolve, reject) => {
    try {
      db.transaction((tx) => {
        tx.executeSql(
          'SELECT userId, day, steps, calories, distance, activeTime FROM activity WHERE day = ? AND (userId = ? OR userId IS NULL)',
          [day, userId],
          (tx, results) => {
            if (results.rows.length > 0) {
              const row = results.rows.item(0);
              console.log("Loaded data from SQLite:", row);
              resolve({
                userId: row.userId || null,
                day: row.day,
                steps: row.steps || 0,
                calories: row.calories || 0,
                distance: row.distance || 0,
                activeTime: row.activeTime || 0
              });
            } else {
              console.log("No data found for today, defaulting to 0.");
              resolve({
                userId: userId,
                day: day,
                steps: 0,
                calories: 0,
                distance: 0,
                activeTime: 0
              });
            }
          },
          (tx, error) => {
            console.error("Error executing SQL:", error);
            reject(error);
          }
        );
      });
    } catch (error) {
      console.error("Error loading from SQLite:", error);
      reject(error);
    }
  });
};

// H√†m l·∫•y d·ªØ li·ªáu theo ng√†y
const getActivityByDay = async (db, day) => {
  return new Promise((resolve, reject) => {
    try {
      db.transaction((tx) => {
        tx.executeSql(
          'SELECT * FROM activity WHERE day = ?',
          [day],
          (tx, results) => {
            if (results.rows.length > 0) {
              const row = results.rows.item(0);
              console.log(`Data for ${day}:`, row);
              resolve(row);
            } else {
              console.log(`No data found for ${day}`);
              resolve(null);
            }
          },
          (tx, error) => {
            console.error(`Error fetching data for ${day}:`, error);
            reject(error);
          }
        );
      });
    } catch (error) {
      console.error(`Error in getActivityByDay:`, error);
      reject(error);
    }
  });
};

// H√†m l·∫•y to√†n b·ªô d·ªØ li·ªáu
const getAllActivityData = async (db) => {
  return new Promise((resolve, reject) => {
    try {
      db.transaction((tx) => {
        tx.executeSql(
          'SELECT * FROM activity',
          [],
          (tx, results) => {
            const rows = results.rows;
            let data = [];
            for (let i = 0; i < rows.length; i++) {
              data.push(rows.item(i));
            }
            console.log("T·∫•t c·∫£ d·ªØ li·ªáu b·∫£ng Activity:", data);
            resolve(data);
          },
          (tx, error) => {
            console.error('L·ªói khi l·∫•y to√†n b·ªô d·ªØ li·ªáu:', error);
            reject(error);
          }
        );
      });
    } catch (error) {
      console.error('L·ªói l·∫•y d·ªØ li·ªáu t·ª´ SQLite:', error);
      reject(error);
    }
  });
};

// H√†m c·∫≠p nh·∫≠t userId cho d·ªØ li·ªáu c≈© khi ƒëƒÉng nh·∫≠p
const assignUserIdToOldData = async (db, userId) => {
  try {
    await db.transaction(async (tx) => {
      await tx.executeSql(
        'UPDATE activity SET userId = ? WHERE userId IS NULL',
        [userId],
        () => console.log(`Assigned userId ${userId} to old data for today`),
        (_, error) => console.error('Error updating userId:', error)
      );
    });
  } catch (error) {
    console.error('Error assigning userId to old data:', error);
  }
};

// H√†m x√≥a to√†n b·ªô d·ªØ li·ªáu trong b·∫£ng Activity
const deleteAllActivityData = async (db) => {
  try {
    await db.transaction(async (tx) => {
      await tx.executeSql(
        'DELETE FROM activity',
        [],
        () => console.log("ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu trong b·∫£ng Activity"),
        (_, error) => console.error("L·ªói khi x√≥a d·ªØ li·ªáu:", error)
      );
    });
  } catch (error) {
    console.error("L·ªói khi x√≥a to√†n b·ªô d·ªØ li·ªáu trong b·∫£ng Activity:", error);
  }
};


export {
  createTable,
  saveStepsToSQLite,
  loadStepsFromSQLite,
  getActivityByDay,
  getAllActivityData,
  assignUserIdToOldData, // Th√™m h√†m m·ªõi
  deleteAllActivityData
};